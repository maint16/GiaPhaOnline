// <auto-generated />
using System;
using AppDb.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Main.Migrations
{
    [DbContext(typeof(RelationalDbContext))]
    partial class RelationalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("AppDb.Models.Entities.AccessToken", b =>
                {
                    b.Property<string>("Code");

                    b.Property<int>("OwnerId");

                    b.Property<double?>("ExpiredTime");

                    b.Property<double>("IssuedTime");

                    b.HasKey("Code", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("AccessToken");
                });

            modelBuilder.Entity("AppDb.Models.Entities.ActivationToken", b =>
                {
                    b.Property<string>("Code");

                    b.Property<int>("OwnerId");

                    b.Property<double>("ExpiredTime");

                    b.Property<double>("IssuedTime");

                    b.HasKey("Code", "OwnerId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ActivationToken");
                });

            modelBuilder.Entity("AppDb.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryGroupId");

                    b.Property<double>("CreatedTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Photo");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AppDb.Models.Entities.CategoryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CreatedTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("AppDb.Models.Entities.CategorySummary", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<double>("LastTopicCreatedTime");

                    b.Property<int>("LastTopicId");

                    b.Property<string>("LastTopicTitle");

                    b.Property<int>("TotalFollower");

                    b.Property<int>("TotalPost");

                    b.HasKey("CategoryId");

                    b.HasIndex("LastTopicId")
                        .IsUnique();

                    b.ToTable("CategorySummary");
                });

            modelBuilder.Entity("AppDb.Models.Entities.FollowCategory", b =>
                {
                    b.Property<int>("FollowerId");

                    b.Property<int>("CategoryId");

                    b.Property<double>("CreatedTime");

                    b.Property<int>("Status");

                    b.HasKey("FollowerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FollowCategory");
                });

            modelBuilder.Entity("AppDb.Models.Entities.FollowTopic", b =>
                {
                    b.Property<int>("FollowerId");

                    b.Property<int>("TopicId");

                    b.Property<double>("CreatedTime");

                    b.Property<int>("Status");

                    b.HasKey("FollowerId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("FollowTopic");
                });

            modelBuilder.Entity("AppDb.Models.Entities.NotificationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CreatedTime");

                    b.Property<string>("ExtraInfo");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("OwnerId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("NotificationMessage");
                });

            modelBuilder.Entity("AppDb.Models.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryGroupId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<double>("CreatedTime");

                    b.Property<double?>("LastModifiedTime");

                    b.Property<int>("OwnerId");

                    b.Property<int>("Status");

                    b.Property<int>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TopicId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("AppDb.Models.Entities.ReportTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("ReporterId");

                    b.Property<double>("CreatedTime");

                    b.Property<double?>("LastModifiedTime");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("TopicId", "ReporterId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReporterId");

                    b.ToTable("ReportTopic");
                });

            modelBuilder.Entity("AppDb.Models.Entities.SignalrConnection", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("LastActivityTime");

                    b.Property<int>("UserId");

                    b.HasKey("ClientId");

                    b.ToTable("SignalrConnection");
                });

            modelBuilder.Entity("AppDb.Models.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<int>("CategoryGroupId");

                    b.Property<int>("CategoryId");

                    b.Property<double>("CreatedTime");

                    b.Property<double?>("LastModifiedTime");

                    b.Property<int>("OwnerId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("AppDb.Models.Entities.TopicSummary", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("TotalFollower");

                    b.Property<int>("TotalReply");

                    b.HasKey("TopicId");

                    b.ToTable("TopicSummary");
                });

            modelBuilder.Entity("AppDb.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<double>("JoinedTime");

                    b.Property<double?>("LastModifiedTime");

                    b.Property<string>("Nickname")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("Photo");

                    b.Property<int>("Role");

                    b.Property<string>("Signature");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AppDb.Models.Entities.UserDeviceToken", b =>
                {
                    b.Property<string>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CreatedTime");

                    b.Property<int>("UserId");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeviceToken");
                });

            modelBuilder.Entity("AppDb.Models.Entities.UserRealTimeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CreatedTime");

                    b.Property<string>("Group")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRealTimeGroup");
                });

            modelBuilder.Entity("AppDb.Models.Entities.AccessToken", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Owner")
                        .WithMany("AccessTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.ActivationToken", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Owner")
                        .WithOne("ActivationToken")
                        .HasForeignKey("AppDb.Models.Entities.ActivationToken", "OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.Category", b =>
                {
                    b.HasOne("AppDb.Models.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.User", "Creator")
                        .WithMany("Categories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.CategoryGroup", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Creator")
                        .WithMany("CategoryGroups")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.CategorySummary", b =>
                {
                    b.HasOne("AppDb.Models.Entities.Category", "Category")
                        .WithOne("CategorySummary")
                        .HasForeignKey("AppDb.Models.Entities.CategorySummary", "CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.Topic", "LastTopic")
                        .WithOne("CategorySummary")
                        .HasForeignKey("AppDb.Models.Entities.CategorySummary", "LastTopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.FollowCategory", b =>
                {
                    b.HasOne("AppDb.Models.Entities.Category", "Category")
                        .WithMany("FollowCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.User", "Follower")
                        .WithMany("FollowCategories")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.FollowTopic", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Follower")
                        .WithMany("FollowTopics")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.Topic", "Topic")
                        .WithMany("FollowTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.NotificationMessage", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Owner")
                        .WithMany("NotificationMessages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.Reply", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "Owner")
                        .WithMany("Replies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.Topic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.ReportTopic", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "TopicOwner")
                        .WithMany("OwnedTopicReports")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.User", "TopicReporter")
                        .WithMany("ReportedPosts")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.Topic", "Topic")
                        .WithMany("ReportTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.Topic", b =>
                {
                    b.HasOne("AppDb.Models.Entities.CategoryGroup")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AppDb.Models.Entities.User", "Owner")
                        .WithMany("Topics")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.TopicSummary", b =>
                {
                    b.HasOne("AppDb.Models.Entities.Topic", "Topic")
                        .WithOne("TopicSummary")
                        .HasForeignKey("AppDb.Models.Entities.TopicSummary", "TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppDb.Models.Entities.UserDeviceToken", b =>
                {
                    b.HasOne("AppDb.Models.Entities.User", "User")
                        .WithMany("DeviceTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
